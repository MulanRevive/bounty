之前实现了基本的函数功能，本周支持了如下的 lambda 表达式：
```
边长 -> 边长 * 边长
```
用`->`似乎符合数学中“映射”的表示（下摘自 wiki “Lambda calculus”页）：

![](截图/2020-07-16_箭头.png)

可以在 map、filter 中使用：
```python
print(list(map(边长 -> 边长 * 边长, [1, 2, 3])))
=> [1, 4, 9]
```

也可以在块中包含多个语句：
```python
print(list(map(边长 -> {
  面积 = 边长 * 边长
  return 面积
}, [1, 2, 3])))
``` 

如果这些语句较短（中文命名的标识符往往更短），也可以用分号分隔后放在一行内：
```python
print(list(map(边长 -> { 面积 = 边长 * 边长; return 面积 }, [1, 2, 3])))
```

暂时只添加了单个形参的 lambda 表达式，还有些用法仍在摸索。

还有一种类似功能的匿名函数写法：
```javascript
print(list(map(func (边长) { 面积 = 边长 * 边长; return 面积 }, [1, 2, 3])))
```

它已经支持多形参，也可以在调用时直接跟实参：
```javascript
print(func (长, 宽) {
  面积 = 长 * 宽;
  return 面积
}(3, 4))
=> 12
```

## 代码统计

下面是几个主要部分的代码行数统计，格式为：上周->本周。

- 测试
  - 木兰测试用例：1075 -> 1090
  - `运行测试.py`，检验所有木兰测试代码片段：145 -> 148
  - 未变
    - `test语法树.py`，确保生成的语法树与原始版本一致：63
- 实现：1941 -> 2075
  - `分析器/语法分析器.py`：824 -> 886
  - `分析器/语法树.py`，`功用/调试辅助.py`，包括对 ast 库的中文封装：260 -> 271
  - `分析器/词法分析器.py`：184 -> 187
  - `环境.py`，加载木兰模块：87 -> 88
  - 未变
    - `演示高亮.py`：98
    - `中.py`，主程序：35
