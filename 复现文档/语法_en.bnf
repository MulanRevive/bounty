if_stmt     : IF expr block elif_stmt
            | IF expr block ELSE block
            | stmt IF expr

elif_stmt   :
            | ELIF expr block elif_stmt
            | ELIF expr block ELSE block

while_stmt  : WHILE expr block
            | LOOP block

using_stmt  : USING module_names IN module_name_
            | USING * IN module_name_
            | USING module_names

module_names    : module_name
                | module_names , module_name

module_name_    : module_name
                | DOTDOT
                | DOT

break_stmt  : BREAK

continue_stmt : CONTINUE

block       : ;
            | LBRACE stmt_list RBRACE

for_stmt    : FOR iterator IN loop_range block
            | FOR iterator : loop_range block
            | stmt FOR iterator IN loop_range
            | stmt FOR iterator : loop_range

loop_range  : expr

range_expr  : expr DOTDOT expr
            | expr DOTDOTLT expr
            | range_expr BY expr

function    : FUNC IDENTIFIER ( param_list ) block
            | FUNC IDENTIFIER block
            | FUNC IDENTIFIER ( param_list ) : type_name block
            | FUNC IDENTIFIER : type_name block

type_name   : name
            | type_name [ type_list ]

type_list   : type_name
            | type_list , type_name

type_define : TYPE name bases type_body

bases       :
            | : prefix_expr
            | : prefix_exprs

type_body   : LBRACE type_stmts RBRACE

type_stmts  :
            | type_stmts type_stmt

type_stmt   : block
            | type_define
            | operator
            | function
            | property

property    : ATTR IDENTIFIER block
            | ATTR IDENTIFIER ( ) block
            | ATTR IDENTIFIER = ( param ) block
